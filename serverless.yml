# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: maprover-infer-js
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  stage: prod
  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

#you can add packaging information here
package:
  individually: true

functions:
  api-describe:
    runtime: nodejs12.x
    handler: describe.inferHandler
    package: 
      include:
        - lib/**
        - node_modules/**
        - package-lock.json
        - api-gateway-models/**
      exclude:
        - models/**
    events:
      - http:
          path: api/describe
          method: get
          cors: true
          private: false
          documentation:
            summary: "Returns description of endpoints"
            description: "Returns description of endpoints. Format: class-name: [name, relative endpoint]"
            tags:
              - "Api"

#Models 
  airway-runway:
    runtime: python3.6
    package: 
      include:
        - models/**
        - api-gateway-models/**
      exclude:
        - lib/**
        - node_modules/**
        - package-lock.json
    handler: pyinfer.inferHandler
    events:
      - http:
          path: api/airway-runway
          method: post
          cors: true
          private: false
          documentation:
            summary: "Classify a map tile that includes a map feature - airway-runway"
            description: "Classifies the tile and returns true if tile contains 'airway-runway' feature to a class or false if it does not."
            tags:
              - "Color Model"
            requestModels:
              "application/json": "TileRequest"
  amenity-police:
    runtime: nodejs12.x
    handler: infer.inferHandler
    package: 
      include:
        - lib/**
        - node_modules/**
        - package-lock.json
        - api-gateway-models/**
      exclude:
        - models/**
    events:
      - http:
          reqValidatorName: 'tileInputValidator'
          path: infer/amenity-police
          method: post
          cors: true
          private: false
          documentation:
            summary: "Classify a map tile that includes a map feature - police"
            description: "Classifies the tile and returns true if tile contains 'police' feature to a class or false if it does not."
            tags:
              - "Data Creation"
              - "Some other tag"
            requestModels:
              "application/json": "TileRequest"
  amenity-firestation:
    runtime: nodejs12.x
    handler: infer.inferHandler
    package: 
      include:
        - lib/**
        - node_modules/**
        - package-lock.json
        - api-gateway-models/**
      exclude:
        - models/**
    events:
      - http:
          reqValidatorName: 'tileInputValidator'
          path: infer/amenity-firestation
          method: post
          cors: true
          private: false
          documentation:
            summary: "Classify a map tile that includes a map feature - firestation"
            description: "Classifies the tile and returns true if tile contains 'firestation' feature to a class or false if it does not."
            tags:
              - "Data Creation"
              - "Some other tag"
            requestModels:
              "application/json": "TileRequest"
  landuse-quarry:
    runtime: nodejs12.x
    handler: infer.inferHandler
    package: 
      include:
        - lib/**
        - node_modules/**
        - package-lock.json
        - api-gateway-models/**
      exclude:
        - models/**
    events:
      - http:
          reqValidatorName: 'tileInputValidator'
          path: infer/landuse-quarry
          method: post
          cors: true
          private: false
          documentation:
            summary: "Classify a map tile that includes a map feature - quarry"
            description: "Classifies the tile and returns true if tile contains 'quarry' feature to a class or false if it does not."
            tags:
              - "Api"

# you can add CloudFormation resource templates here
resources:
  Resources:
    tileInputValidator:
      Type: "AWS::ApiGateway::RequestValidator"
      Properties:
        Name: 'tileInputValidator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

plugins:
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation
  - serverless-plugin-custom-roles
  - serverless-python-requirements
custom:
  documentation:
    api:
      info:
        version: "v0.0.3"
        title: "Maprover API"
        description: "Maprover API - Deep learning for a map"
    models:
      - 
        name: 'TileRequest'
        description: 'Model for validation of the tile request'
        contentType: "application/json"
        schema: ${file(api-gateway-models/tile_input.json)}