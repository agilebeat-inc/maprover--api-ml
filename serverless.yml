# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: maprover-infer-js
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs12.x
  stage: prod
  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

#you can add packaging information here
package:
 include:
   - models/**
   - lib/**
   - node_modules/**
   - package-lock.json
   - api-gateway-models/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  infer-motorway:
    handler: infer.inferHandler
    events:
      - http:
          reqValidatorName: 'tileInputValidator'
          path: infer/motorway
          method: post
          cors: true
          private: false
          documentation:
            summary: "Classify a map tile that includes a map feature - motorway"
            description: "Classifies the tile and returns true if tile contains 'motorway' feature to a class or false if it does not."
            tags:
              - "Data Creation"
              - "Some other tag"
            requestModels:
              "application/json": "TileRequest"

  infer-trunk:
    handler: infer.inferHandler
    events:
      - http:
          reqValidatorName: 'tileInputValidator'
          path: infer/trunk
          method: post
          cors: true
          private: false
          documentation:
            summary: "Classify a map tile that includes a map feature - trunk"
            description: "Classifies the tile and returns true if tile contains 'trunk' feature to a class or false if it does not."
            tags:
              - "Data Creation"
              - "Some other tag"
            requestModels:
              "application/json": "TileRequest"     

  infer-primary:
    handler: infer.inferHandler
    events:
      - http:
          reqValidatorName: 'tileInputValidator'
          path: infer/primary
          method: post
          cors: true
          private: false
          documentation:
            summary: "Classify a map tile that includes a map feature - primary"
            description: "Classifies the tile and returns true if tile contains 'primary' feature to a class or false if it does not."
            tags:
              - "Data Creation"
              - "Some other tag"
            requestModels:
              "application/json": "TileRequest"   

  infer-secondary:
    handler: infer.inferHandler
    events:
      - http:
          reqValidatorName: 'tileInputValidator'
          path: infer/secondary
          method: post
          cors: true
          private: false
          documentation:
            summary: "Classify a map tile that includes a map feature - secondary"
            description: "Classifies the tile and returns true if tile contains 'secondary' feature to a class or false if it does not."
            tags:
              - "Data Creation"
              - "Some other tag"
            requestModels:
              "application/json": "TileRequest"    

  infer-helipad:
    handler: infer.inferHandler
    events:
      - http:
          reqValidatorName: 'tileInputValidator'
          path: infer/helipad
          method: post
          cors: true
          private: false
          documentation:
            summary: "Classify a map tile that includes a map feature - helipad"
            description: "Classifies the tile and returns true if tile contains 'helipad' feature to a class or false if it does not."
            tags:
              - "Data Creation"
              - "Some other tag"
            requestModels:
              "application/json": "TileRequest"   

  infer-hospital:
    handler: infer.inferHandler
    events:
      - http:
          reqValidatorName: 'tileInputValidator'
          path: infer/hospital
          method: post
          cors: true
          private: false
          documentation:
            summary: "Classify a map tile that includes a map feature - hospital"
            description: "Classifies the tile and returns true if tile contains 'hospital' feature to a class or false if it does not."
            tags:
              - "Data Creation"
              - "Some other tag"
            requestModels:
              "application/json": "TileRequest" 

  infer-police:
    handler: infer.inferHandler
    events:
      - http:
          reqValidatorName: 'tileInputValidator'
          path: infer/police
          method: post
          cors: true
          private: false
          documentation:
            summary: "Classify a map tile that includes a map feature - police"
            description: "Classifies the tile and returns true if tile contains 'police' feature to a class or false if it does not."
            tags:
              - "Data Creation"
              - "Some other tag"
            requestModels:
              "application/json": "TileRequest"

  infer-firestation:
    handler: infer.inferHandler
    events:
      - http:
          reqValidatorName: 'tileInputValidator'
          path: infer/firestation
          method: post
          cors: true
          private: false
          documentation:
            summary: "Classify a map tile that includes a map feature - firestation"
            description: "Classifies the tile and returns true if tile contains 'firestation' feature to a class or false if it does not."
            tags:
              - "Data Creation"
              - "Some other tag"
            requestModels:
              "application/json": "TileRequest"   

  infer-quarry:
    handler: infer.inferHandler
    events:
      - http:
          reqValidatorName: 'tileInputValidator'
          path: infer/quarry
          method: post
          cors: true
          private: false
          documentation:
            summary: "Classify a map tile that includes a map feature - quarry"
            description: "Classifies the tile and returns true if tile contains 'quarry' feature to a class or false if it does not."
            tags:
              - "Data Creation"
              - "Some other tag"
            requestModels:
              "application/json": "TileRequest"     


# you can add CloudFormation resource templates here
resources:
  Resources:
    tileInputValidator:
      Type: "AWS::ApiGateway::RequestValidator"
      Properties:
        Name: 'tileInputValidator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

plugins:
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation
  - serverless-plugin-custom-roles
  - serverless-python-requirements
custom:
  documentation:
    api:
      info:
        version: "v0.0.2"
        title: "Maprover API"
        description: "Maprover API - Deep learning for a map"
    models:
      - 
        name: 'TileRequest'
        description: 'Model for validation of the tile request'
        contentType: "application/json"
        schema: ${file(api-gateway-models/tile_input.json)}